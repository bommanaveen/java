1.Write a program to convert the given decimal to binary and print the reverse of the binary decimal.

import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.println("Enter a decimal number:");
        int decimal = scanner.nextInt();
        String binary = Integer.toBinaryString(decimal);
        System.out.println("Binary representation: " + binary);
        String reverseBinary = new StringBuilder(binary).reverse().toString();
        System.out.println("Reverse of binary: " + reverseBinary);
    }
}
2.Write a program to find whether the person is eligible for vote or not. And if that particular person is not eligible, then print how many years are left to be eligible.
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.println("Enter your age:");
        int age = scanner.nextInt();

        int votingAge = 18; 

        if (age >= votingAge) {
            System.out.println("You are eligible to vote.");
        } else {
            int yearsLeft = votingAge - age;
            System.out.println("You are not eligible to vote. You need to wait " + yearsLeft + " more year(s) to be eligible.");
        }
    }
}
3.Find the LCM and GCD of n numbers?
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.println("Enter the number of integers:");
        int n = scanner.nextInt();
        int[] numbers = new int[n];

        System.out.println("Enter " + n + " integers:");
        for (int i = 0; i < n; i++) {
            numbers[i] = scanner.nextInt();
        }

        int lcm = numbers[0];
        int gcd = numbers[0];

        for (int i = 1; i < n; i++) {
            lcm = lcm(lcm, numbers[i]);
            gcd = gcd(gcd, numbers[i]);
        }

        System.out.println("LCM: " + lcm);
        System.out.println("GCD: " + gcd);
    }

    public static int lcm(int a, int b) {
        return a * b / gcd(a, b);
    }

    public static int gcd(int a, int b) {
        if (b == 0) {
            return a;
        } else {
            return gcd(b, a % b);
        }
    }
}
4.Write a program using function to calculate the simple interest. Suppose the customer is a senior citizen. He is being offered 12 percent rate of interest; for all other customers, the ROI is 10 percent.


  import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.println("Enter the principal amount:");
        double principal = scanner.nextDouble();

        System.out.println("Enter the rate of interest (in years):");
        double time = scanner.nextDouble();

        System.out.println("Are you a senior citizen? (yes/no)");
        String seniorCitizen = scanner.next();

        double interestRate;
        if (seniorCitizen.equalsIgnoreCase("yes")) {
            interestRate = 0.12; 
        } else {
            interestRate = 0.10; 
        }

        double simpleInterest = calculateSimpleInterest(principal, time, interestRate);

        System.out.println("Simple Interest: " + simpleInterest);
    }

    public static double calculateSimpleInterest(double principal, double time, double interestRate) {
        return (principal * time * interestRate);
    }
}
5.Write a program to print all the composite numbers between a and b?
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.println("Enter the lower bound (a):");
        int a = scanner.nextInt();

        System.out.println("Enter the upper bound (b):");
        int b = scanner.nextInt();

        System.out.println("Composite numbers between " + a + " and " + b + " are:");
        for (int i = a; i <= b; i++) {
            if (isComposite(i)) {
                System.out.print(i + " ");
            }
        }
    }

    public static boolean isComposite(int n) {
        if (n <= 1) {
            return false;
        }
        for (int i = 2; i * i <= n; i++) {
            if (n % i == 0) {
                return true;
            }
        }
        return false;
    }
}


